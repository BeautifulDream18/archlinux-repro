#!/bin/bash
set -eE -o pipefail

BUILDDIRECTORY=/var/lib/repro

BOOTSTRAPMIRROR=https://mirror.archlinux.no/iso/latest
readonly bootstrap_img=archlinux-bootstrap-"$(date +%Y.%m)".01-"$(uname -m)".tar.gz
CONFIGDIR='REPRO_CONFIG_DIR'

# HOSTMIRROR=$(curl -s 'https://www.archlinux.org/mirrorlist/?protocol=https' | awk '/^#Server/ {print $3; exit}')
## Hardcoded until further notice
HOSTMIRROR="http://mirror.neuf.no/archlinux/\$repo/os/\$arch"

# IMGDIRECTORY=$(mktemp -dt .arch_img)
IMGDIRECTORY="/tmp/arch_img"
mkdir -p $IMGDIRECTORY

DIFFOSCOPE="diffoscope"

#Disorderfs defaults
DISORDERFS_SHUFFLE_DIRENTS=no
DISORDERFS_REVERSE_DIRENTS=yes
DISORDERFS_SORT_DIRENTS=no

orig_argv=("$0" "$@")
src_owner=${SUDO_USER:-$USER}
check_root() {
	(( EUID == 0 )) && return
	if type -P sudo >/dev/null; then
		exec sudo -- "${orig_argv[@]}"
	else
		exec su root -c "$(printf ' %q' "${orig_argv[@]}")"
	fi
}

is_btrfs() {
	[[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs ]]
}

is_subvolume() {
	[[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs && "$(stat -c %i "$1")" == 256 ]]
}

colorize() {
	# prefer terminal safe colored and bold text when tput is supported
	if tput setaf 0 &>/dev/null; then
		ALL_OFF="$(tput sgr0)"
		BOLD="$(tput bold)"
		BLUE="${BOLD}$(tput setaf 4)"
		GREEN="${BOLD}$(tput setaf 2)"
		RED="${BOLD}$(tput setaf 1)"
		YELLOW="${BOLD}$(tput setaf 3)"
	else
		ALL_OFF="\e[0m"
		BOLD="\e[1m"
		BLUE="${BOLD}\e[34m"
		GREEN="${BOLD}\e[32m"
		RED="${BOLD}\e[31m"
		YELLOW="${BOLD}\e[33m"
	fi
	readonly ALL_OFF BOLD BLUE GREEN RED YELLOW
}
colorize

plain() {
	local mesg=$1; shift
	printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg() {
	local mesg=$1; shift
	printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg2() {
	local mesg=$1; shift
	printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
	local mesg=$1; shift
	printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
	local mesg=$1; shift
	printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}



exec_nspawn(){
    local container=$1
    systemd-nspawn -q --as-pid2 -D "$BUILDDIRECTORY/$container" "${@:2}"
}

cleanup_root_volume(){
    warning "Removing root container..."
    rm -rf "$BUILDDIRECTORY/root"
}

# $1 -> name of container
remove_snapshot (){
    local build=$1
    msg2 "Delete snapshot for $build..."
    if ((run_disorderfs)); then
        umount "$BUILDDIRECTORY/$build" || true
        umount "$BUILDDIRECTORY/${build}_disorder" || true
    else
        umount "$BUILDDIRECTORY/$build" || true
    fi
    rm -rf "$BUILDDIRECTORY"/{${build},${build}_upperdir,${build}_workdir,${build}_disorder} || true
}

# $1 -> name of container
create_snapshot (){
    local build=$1
    local disorderfs=$2

    trap '{ remove_snapshot $build ; exit 1; }' ERR
    trap '{ remove_snapshot $build ; trap - INT; kill -INT $$; }' INT

    msg2 "Create snapshot for $build..."
    mkdir -p "$BUILDDIRECTORY"/{${build},${build}_upperdir,${build}_workdir}

    if ((disorderfs)); then
        # The idea is that instead of mounting overlayfs on $build when we want disorderfs, we mount it on
        # ${build}_disorder so other functions dont have to care for the difference

        mkdir "$BUILDDIRECTORY/${build}_disorder"
        mount -t overlay overlay \
            -o lowerdir="$BUILDDIRECTORY/root",upperdir="$BUILDDIRECTORY/${build}_upperdir",workdir="$BUILDDIRECTORY/${build}_workdir" \
            "$BUILDDIRECTORY/${build}_disorder"
        msg "Using disorderfs settings..."
        disorderfs \
            --multi-user=yes \
            --shuffle-dirents=$DISORDERFS_SHUFFLE_DIRENTS \
            --reverse-dirents=$DISORDERFS_REVERSE_DIRENTS \
            --sort-dirents=$DISORDERFS_SORT_DIRENTS \
            "$BUILDDIRECTORY/${build}_disorder" "$BUILDDIRECTORY/${build}"
        # msg2 "--shuffle-dirents $DISORDERFS_SHUFFLE_DIRENTS"
        # msg2 "--reverse-dirents $DISORDERFS_REVERSE_DIRENTS"
        # msg2 "--sort-dirents $DISORDERFS_SORT_DIRENTS"
    else
        mount -t overlay overlay \
            -o lowerdir="$BUILDDIRECTORY/root",upperdir="$BUILDDIRECTORY/${build}_upperdir",workdir="$BUILDDIRECTORY/${build}_workdir" \
            "$BUILDDIRECTORY/${build}"
    fi
    touch "$BUILDDIRECTORY/$build"
}

set_build_env(){
    local build=$1
    msg "Settings build environemnt..."
    exec_nspawn $build \
    tee /home/build/.bashrc <<-__END__
export TZ=$TZ
export LANG=$LANG
export LC_ALL=$LC_ALL
__END__

    # Generate locale
    exec_nspawn $build \
bash <<-__END__
echo $LOCALE > /etc/locale.gen
locale-gen
__END__
}

build_package(){
    local build=$1
    exec_nspawn $build \
        --bind="$PWD:/startdir" \
        --bind="$PWD:/srcdest" \
bash <<-__END__
set -e
mkdir -p /pkgdest
chown build:build /pkgdest
mkdir -p /srcpkgdest
chown build:build /srcpkgdest
cd /startdir
sudo -u build SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH PKGDEST=/pkgdest SRCPKGDEST=/srcpkgdest makepkg -sc --noconfirm || true
__END__
    mkdir -p "./$build"
    for pkgfile in "$BUILDDIRECTORY/$build"/pkgdest/*; do
        mv "$pkgfile" "./$build/"
    done
    chown -R "$src_owner" "./$build"
}

init_chroot(){
    set -e

    check_root

    if [ ! -d "$BUILDDIRECTORY" ]; then
        mkdir -p $BUILDDIRECTORY
    fi

    # Prepare root chroot
    if [ ! -d "$BUILDDIRECTORY"/root ]; then

        msg "Preparing chroot"
        trap '{ cleanup_root_volume; exit 1; }' ERR
        trap '{ cleanup_root_volume; trap - INT; kill -INT $$; }' INT

        msg2 "Extracting image into container..."
        mkdir -p $BUILDDIRECTORY/root
        tar xvf "$IMGDIRECTORY/$bootstrap_img" -C "$BUILDDIRECTORY/root" --strip-components=1 > /dev/null


        printf 'Server = %s\n' "$HOSTMIRROR" > "$BUILDDIRECTORY"/root/etc/pacman.d/mirrorlist
        printf '%s.UTF-8 UTF-8\n' en_US de_DE > "$BUILDDIRECTORY"/root/etc/locale.gen
        printf 'LANG=en_US.UTF-8\n' > "$BUILDDIRECTORY"/root/etc/locale.conf

        echo $makepkg_conf
        echo $pacman_conf

        cp $makepkg_conf "$BUILDDIRECTORY"/root/etc/makepkg.conf
        cp $pacman_conf "$BUILDDIRECTORY"/root/etc/pacman.conf

        systemd-machine-id-setup --root="$BUILDDIRECTORY"/root
        msg2 "Setting up keyring, this might take a while..."
        # exec_nspawn root pacman-key --init #&> /dev/null
        # exec_nspawn root pacman-key --populate archlinux #&> /dev/null
        # exec_nspawn root pacman-key --refresh #&> /dev/bull
        
        msg2 "Updating and installing base & base-devel"
        exec_nspawn root pacman -Syu --noconfirm --ignore pacman-git
        exec_nspawn root pacman -S base-devel --noconfirm --ignore pacman-git
        exec_nspawn root locale-gen

        printf 'build ALL = NOPASSWD: /usr/bin/pacman\n' > "$BUILDDIRECTORY"/root/etc/sudoers.d/build-pacman
        exec_nspawn root useradd -m -G wheel -s /bin/bash build

        msg2 "Installing pacman-git"
        exec_nspawn root bash -c "yes | pacman -S pacman-git"
        cp $makepkg_conf "$BUILDDIRECTORY"/root/etc/makepkg.conf
        cp $pacman_conf "$BUILDDIRECTORY"/root/etc/pacman.conf
    else
        printf 'Server = %s\n' "$HOSTMIRROR" > "$BUILDDIRECTORY"/root/etc/pacman.d/mirrorlist
        cp $makepkg_conf "$BUILDDIRECTORY"/root/etc/makepkg.conf
        cp $pacman_conf "$BUILDDIRECTORY"/root/etc/pacman.conf
        exec_nspawn root pacman -Syu --noconfirm
    fi
}

cmd_build(){
    shopt -s lastpipe

    check_root

    SOURCE_DATE_EPOCH=$(date +%s)
    msg "Using SOURCE_DATE_EPOCH: $SOURCE_DATE_EPOCH"

    # Build 1 - no disorderfs what so ever
    msg "Starting build1..."
    create_snapshot "build1" 0
    build_package "build1"
    remove_snapshot "build1"

    # Get profiles
    i=1
    while read line
    do
        profiles[ $i ]="$line"        
        (( i++ ))
    done < <(ls $CONFIGDIR/profiles/*.conf | sort -R | tail -$num_builds)

    for build_number in $(seq 1 $num_builds); do 
        if [ "$user_profile" != ""]; then
            snapshot_profile=$user_profile
            snapshot_name=${snapshot_profile##*/}
        else
            snapshot_profile=${profiles[$build_number]}
            snapshot_name=${snapshot_profile##*/}
        fi
        msg "Using profile: " $snapshot_name
        source $snapshot_profile
        build_number=$((build_number+1))
        msg "Starting build$build_number..."
        create_snapshot "build$build_number" $run_disorderfs
        set_build_env "build$build_number"
        build_package "build$build_number"
        remove_snapshot "build$build_number"
    done

    # Remove traps so we don't accidental an rm -rf
    trap - ERR INT

    msg "Comparing hashes..."
    is_error=false
    for pkgfile in ./build1/*; do
        pkgfile=${pkgfile##*/}
        sha512sum -b ./build1/$pkgfile | read refference_build_checksum _

        for build_number in $(seq 1 $num_builds); do 
            snapshot_profile=${profiles[$build_number]}
            snapshot_name=${snapshot_profile##*/}
            build_number=$((build_number+1))
            sha512sum -b ./build$build_number/$pkgfile | read other_build_checksum _
            if [ "$refference_build_checksum" = "$other_build_checksum" ]; then
              msg2 "$pkgfile from build$build_number is reproducible with $snapshot_name!"
            else
              warning "$pkgfile from build$build_number is not reproducible with $snapshot_name!"
              if ((run_diffoscope)); then
                  $DIFFOSCOPE ./build1/$pkgfile ./build$build_number/$pkgbuild || true
              fi
              is_error=true
            fi
        done
    done

    if $is_error; then
        error "Package is not reproducible"
    else
        msg "Package is reproducible!"
    fi
}

cmd_check(){
    echo "Doing a build!"
}

cmd_help(){
cat <<__END__
Usage:   
  repro <command> [options]

Commands:
  check                       Recreate a package file
  build                       Build a package and test for reproducability 
  help                        This help message

General Options:
 -b <num>                     Number of subsequent builds to run with random profiles
 -d                           Run diffoscope if packages are not reproducible
 -p <profile>                 Run builds with a set profile
 -o                           Run tests with disorderfs 
 -C <file>                    Specify repro.conf to build with
 -P <file>                    Specify pacman.conf to build with
 -M <file>                    Specify makepkg.conf to build with
__END__
}

# Default options
pacman_conf=$CONFIGDIR/pacman.conf
makepkg_conf=$CONFIGDIR/makepkg.conf
num_builds=1 #We just do two builds as default
user_profile=""
run_diffoscope=0
run_disorderfs=0

args(){
    while getopts :dob:r:p:C:P:M: arg; do
        case $arg in
            C) REPRO_CONF=$OPTARG;;
            P) pacman_conf=$OPTARG;;
            M) makepkg_conf=$OPTARG;;
            b) num_builds=$OPTARG;;
            p) user_profile=$OPTARG;;
            d) run_diffoscope=1;;
            o) run_disorderfs=1;;
            *);;
        esac
    done
    
    # Sanity check
    profiles_availabe=$(ls $CONFIGDIR/profiles | wc -l)
    if (( num_builds > profiles_availabe )); then
        error "Not enough profiles available to run $num_builds builds"
        exit 0
    fi
}


REPRO_CONF=${REPRO_CONF:-$CONFIGDIR/repro.conf}
if [[ -r $REPRO_CONF ]]; then
    source $REPRO_CONF 
fi

XDG_REPRO_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/repro"
if [[ "$REPO_CONF" = "$CONFIGDIR/repro.conf" ]]; then
    if [[ -r "$XDG_REPRO_DIR/repro.conf" ]]; then
        source "$XDG_REPRO_DIR/repro.conf"
    elif [[ -r "$HOME/.repro.conf" ]]; then
        source "$HOME/.repro.conf"
    fi
fi


if [ ! -e "$IMGDIRECTORY/$bootstrap_img" ]; then
    curl -o  "$IMGDIRECTORY/$bootstrap_img" "$BOOTSTRAPMIRROR/$bootstrap_img"
    curl -o  "$IMGDIRECTORY/$bootstrap_img.sig" "$BOOTSTRAPMIRROR/$bootstrap_img.sig"
    gpg --verify "$IMGDIRECTORY/$bootstrap_img.sig" "$IMGDIRECTORY/$bootstrap_img"
fi

case "$1" in
    help) cmd_help "$@" ;;
    check) shift; args "$@"; init_chroot; cmd_check "$@" ;;
    build) shift; args "$@"; init_chroot; cmd_build "$@" ;;
    *) args "$@"; init_chroot; cmd_build "$@" ;;
esac
