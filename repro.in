#!/bin/sh

# Misc functions i want from pacman and makepkg

set -eE -o pipefail

BUILDDIRECTORY=/var/lib/repro
BOOTSTRAPMIRROR=https://mirror.archlinux.no/iso/latest
readonly bootstrap_img=archlinux-bootstrap-"$(date +%Y.%m)".01-"$(uname -m)".tar.gz

CONFIGDIR='REPRO_CONFIG_DIR'

# HOSTMIRROR=$(curl -s 'https://www.archlinux.org/mirrorlist/?protocol=https' | awk '/^#Server/ {print $3; exit}')
## Hardcoded until further notice
HOSTMIRROR="http://mirror.neuf.no/archlinux/\$repo/os/\$arch"

# Default options
pacman_conf=$CONFIGDIR/pacman.conf
makepkg_conf=$CONFIGDIR/makepkg.conf

# IMGDIRECTORY=$(mktemp -dt .arch_img)
IMGDIRECTORY="/tmp/arch_img"
mkdir -p $IMGDIRECTORY


orig_argv=("$0" "$@")
src_owner=${SUDO_USER:-$USER}
check_root() {
	(( EUID == 0 )) && return
	if type -P sudo >/dev/null; then
		exec sudo -- "${orig_argv[@]}"
	else
		exec su root -c "$(printf ' %q' "${orig_argv[@]}")"
	fi
}

is_btrfs() {
	[[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs ]]
}

is_subvolume() {
	[[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs && "$(stat -c %i "$1")" == 256 ]]
}

colorize() {
	# prefer terminal safe colored and bold text when tput is supported
	if tput setaf 0 &>/dev/null; then
		ALL_OFF="$(tput sgr0)"
		BOLD="$(tput bold)"
		BLUE="${BOLD}$(tput setaf 4)"
		GREEN="${BOLD}$(tput setaf 2)"
		RED="${BOLD}$(tput setaf 1)"
		YELLOW="${BOLD}$(tput setaf 3)"
	else
		ALL_OFF="\e[0m"
		BOLD="\e[1m"
		BLUE="${BOLD}\e[34m"
		GREEN="${BOLD}\e[32m"
		RED="${BOLD}\e[31m"
		YELLOW="${BOLD}\e[33m"
	fi
	readonly ALL_OFF BOLD BLUE GREEN RED YELLOW
}
colorize

plain() {
	local mesg=$1; shift
	printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg() {
	local mesg=$1; shift
	printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg2() {
	local mesg=$1; shift
	printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
	local mesg=$1; shift
	printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
	local mesg=$1; shift
	printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}



exec_nspawn(){
    local container=$1
    systemd-nspawn -q --as-pid2 -D "$BUILDDIRECTORY/$container" "${@:2}"
}

cleanup_root_volume(){
    warning "Removing root container..."
    rm -rf "$BUILDDIRECTORY/root"
}

# $1 -> name of container
remove_snapshot (){
    local build=$1
    msg2 "Delete snapshot for $build..."
    umount "$BUILDDIRECTORY/$build" &> /dev/null || true
    rm -rf "$BUILDDIRECTORY"/{${build},${build}_upperdir,${build}_workdir}
}

# $1 -> name of container
create_snapshot (){
    local build=$1

    trap '{ remove_snapshot $build ; exit 1; }' ERR
    trap '{ remove_snapshot $build ; trap - INT; kill -INT $$; }' INT

    msg2 "Create overlayfs for $build..."
    mkdir -p "$BUILDDIRECTORY"/{${build},${build}_upperdir,${build}_workdir}
    mount -t overlay overlay \
        -o lowerdir="$BUILDDIRECTORY/root",upperdir="$BUILDDIRECTORY/${build}_upperdir",workdir="$BUILDDIRECTORY/${build}_workdir" \
        "$BUILDDIRECTORY/${build}"
    touch "$BUILDDIRECTORY/$build"
}


build_package(){
    local build=$1
    exec_nspawn $build \
        --bind="$PWD:/startdir" \
        --bind="$PWD:/srcdest" \
bash <<-__END__
set -e
mkdir -p /pkgdest
chown build:build /pkgdest
mkdir -p /srcpkgdest
chown build:build /srcpkgdest
cd /startdir
sudo -u build SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH PKGDEST=/pkgdest SRCPKGDEST=/srcpkgdest makepkg -sc --noconfirm || true
__END__
    mkdir -p "./$build" || true
    for pkgfile in "$BUILDDIRECTORY/$build"/pkgdest/*; do
        mv "$pkgfile" "./$build/"
    done
    chown -R "$src_owner" "./$build"
}

init_chroot(){
    set -e

    check_root

    if [ ! -d "$BUILDDIRECTORY" ]; then
        mkdir -p $BUILDDIRECTORY
    fi

    # Prepare root chroot
    if [ ! -d "$BUILDDIRECTORY"/root ]; then

        msg "Preparing chroot"
        trap '{ cleanup_root_volume; exit 1; }' ERR
        trap '{ cleanup_root_volume; trap - INT; kill -INT $$; }' INT

        msg2 "Extracting image into container..."
        mkdir -p $BUILDDIRECTORY/root
        tar xvf "$IMGDIRECTORY/$bootstrap_img" -C "$BUILDDIRECTORY/root" --strip-components=1 > /dev/null


        printf 'Server = %s\n' "$HOSTMIRROR" > "$BUILDDIRECTORY"/root/etc/pacman.d/mirrorlist
        printf '%s.UTF-8 UTF-8\n' en_US de_DE > "$BUILDDIRECTORY"/root/etc/locale.gen
        printf 'LANG=en_US.UTF-8\n' > "$BUILDDIRECTORY"/root/etc/locale.conf

        echo $makepkg_conf
        echo $pacman_conf

        cp $makepkg_conf "$BUILDDIRECTORY"/root/etc/makepkg.conf
        cp $pacman_conf "$BUILDDIRECTORY"/root/etc/pacman.conf

        systemd-machine-id-setup --root="$BUILDDIRECTORY"/root
        msg2 "Setting up keyring, this might take a while..."
        # exec_nspawn root pacman-key --init #&> /dev/null
        # exec_nspawn root pacman-key --populate archlinux #&> /dev/null
        # exec_nspawn root pacman-key --refresh #&> /dev/bull
        
        msg2 "Updating and installing base & base-devel"
        exec_nspawn root pacman -Syu --noconfirm --ignore pacman-git
        exec_nspawn root pacman -S base-devel --noconfirm --ignore pacman-git
        exec_nspawn root locale-gen

        printf 'build ALL = NOPASSWD: /usr/bin/pacman\n' > "$BUILDDIRECTORY"/root/etc/sudoers.d/build-pacman
        exec_nspawn root useradd -m -G wheel -s /bin/bash build

        msg2 "Installing pacman-git"
        exec_nspawn root bash -c "yes | pacman -S pacman-git"
        cp $makepkg_conf "$BUILDDIRECTORY"/root/etc/makepkg.conf
        cp $pacman_conf "$BUILDDIRECTORY"/root/etc/pacman.conf
    else
        printf 'Server = %s\n' "$HOSTMIRROR" > "$BUILDDIRECTORY"/root/etc/pacman.d/mirrorlist
        cp $makepkg_conf "$BUILDDIRECTORY"/root/etc/makepkg.conf
        cp $pacman_conf "$BUILDDIRECTORY"/root/etc/pacman.conf
        exec_nspawn root pacman -Syu --noconfirm
    fi
}

cmd_build(){

    check_root

    SOURCE_DATE_EPOCH=$(date +%s)
    msg "Using SOURCE_DATE_EPOCH: $SOURCE_DATE_EPOCH"

    # trap '{ cleanup_snapshot; exit 1; }' ERR
    
    # Build 1
    msg "Starting build1..."
    create_snapshot "build1"
    build_package "build1"
    remove_snapshot "build1"

    # Build 2
    msg "Starting build2..."
    create_snapshot "build2"
    build_package "build2"
    remove_snapshot "build2"

    msg "Comparing hashes..."
    is_error=false
    for pkgfile in ./build1/*; do
        sha512sum -b $pkgfile | read build1_checksum _
        sha512sum -b $pkgfile | read build2_checksum _
        if [ "$build1_checksum" = "$build2_checksum" ]; then
          msg2 "${pkgfile##*/} is reproducible!"
        else
          warning "${pkgfile##*/} is not reproducible!"
          is_error=true
        fi
    done

    if $is_error; then
        error "Package is not reproducible"
    else
        msg "Package is reproducible!"
    fi
}

cmd_check(){
    echo "Doing a build!"
}

cmd_help(){
cat <<__END__
Usage:   
  repro <command> [options]

Commands:
  check                       Recreate a package file
  build                       Build a package and test for reproducability 
  help                        This help message

General Options:
 -C                           Specify repro.conf to build with
 -P                           Specify pacman.conf to build with
 -M                           Specify makepkg.conf to build with
__END__
}

args(){
    while getopts :R arg; do
        case $arg in
            C) REPRO_CONF=$OPTARG;;
            P) pacman_conf=$OPTARG;;
            M) makepkg_conf=$OPTARG;;
            *);;
        esac
    done
}


REPRO_CONF=${REPRO_CONF:-$CONFIGDIR/repro.conf}
if [[ -r $REPRO_CONF ]]; then
    source $REPRO_CONF 
fi

XDG_REPRO_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/repro"
if [[ "$REPO_CONF" = "$CONFIGDIR/repro.conf" ]]; then
    if [[ -r "$XDG_REPRO_DIR/repro.conf" ]]; then
        source "$XDG_REPRO_DIR/repro.conf"
    elif [[ -r "$HOME/.repro.conf" ]]; then
        source "$HOME/.repro.conf"
    fi
fi


if [ ! -e "$IMGDIRECTORY/$bootstrap_img" ]; then
    curl -o  "$IMGDIRECTORY/$bootstrap_img" "$BOOTSTRAPMIRROR/$bootstrap_img"
    curl -o  "$IMGDIRECTORY/$bootstrap_img.sig" "$BOOTSTRAPMIRROR/$bootstrap_img.sig"
    gpg --verify "$IMGDIRECTORY/$bootstrap_img.sig" "$IMGDIRECTORY/$bootstrap_img"
fi

case "$1" in
    help) cmd_help "$@" ;;
    check) shift; args "$@"; init_chroot; cmd_check "$@" ;;
    build) shift; args "$@"; init_chroot; cmd_build "$@" ;;
    *) args "$@"; init_chroot; cmd_build "$@" ;;
esac
